{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d789e729-285d-4619-a862-dffb1c15ee5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Describe your income and deductions (e.g. 'I earned ‚Çπ10L salary and ‚Çπ1L freelancing, donated ‚Çπ5K'):\n",
      " I earned ‚Çπ10L salary and ‚Çπ1L freelancing, donated ‚Çπ5K\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "üîç Parsed Values: {'salary_income': 1000000, 'freelance_income': 100000, 'crypto_income': 0, 'donation': 0, 'other_income': 0}\n",
      "\n",
      "----- TAX SUMMARY -----\n",
      "Total Income: ‚Çπ1100000\n",
      "Total Deductions: ‚Çπ50000\n",
      "Taxable Income: ‚Çπ1050000\n",
      "Income Tax Payable: ‚Çπ127500\n",
      "\n",
      "‚úÖ PDF generated: Tax_Summary_Report.pdf\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "import json\n",
    "from fpdf import FPDF\n",
    "\n",
    "\n",
    "\n",
    "def parse_income_input(text):\n",
    "    text = text.lower().replace(\",\", \"\").strip()\n",
    "\n",
    "    result = {\n",
    "        \"salary_income\": 0,\n",
    "        \"freelance_income\": 0,\n",
    "        \"crypto_income\": 0,\n",
    "        \"donation\": 0,\n",
    "        \"other_income\": 0\n",
    "    }\n",
    "\n",
    "    patterns = {\n",
    "        \"salary_income\": r\"(?:‚Çπ|rs\\.?)\\s?(\\d+(?:\\.\\d+)?[kl]?)\\s?(?:from)?\\s?(?:salary|job|jobs|income)?\",\n",
    "        \"freelance_income\": r\"(?:‚Çπ|rs\\.?)\\s?(\\d+(?:\\.\\d+)?[kl]?)\\s?(?:from)?\\s?(?:freelancing|freelancer|side hustle)\",\n",
    "        \"crypto_income\": r\"(?:‚Çπ|rs\\.?)\\s?(\\d+(?:\\.\\d+)?[kl]?)\\s?(?:from)?\\s?(?:crypto|bitcoin|ethereum)\",\n",
    "        \"donation\": r\"(?:‚Çπ|rs\\.?)\\s?(\\d+(?:\\.\\d+)?[kl]?)\\s?(?:donated|donation|to charity)\"\n",
    "    }\n",
    "\n",
    "    for key, pattern in patterns.items():\n",
    "        match = re.search(pattern, text)\n",
    "        if match:\n",
    "            value = match.group(1)\n",
    "            result[key] = parse_amount(value)\n",
    "\n",
    "    return result\n",
    "\n",
    "def parse_amount(value):\n",
    "    value = value.lower().replace(\"rs\", \"\").replace(\"‚Çπ\", \"\").strip()\n",
    "    if value.endswith('k'):\n",
    "        return int(float(value[:-1]) * 1000)\n",
    "    elif value.endswith('l'):\n",
    "        return int(float(value[:-1]) * 100000)\n",
    "    else:\n",
    "        return int(float(value))\n",
    "\n",
    "\n",
    "def load_tax_rules(filepath=\"tax_rules.json\"):\n",
    "    with open(filepath, \"r\") as f:\n",
    "        return json.load(f)\n",
    "\n",
    "def apply_deductions(income, deductions, rules):\n",
    "    std_ded = rules.get(\"standard_deduction_old\", 0)\n",
    "    total_deduction = std_ded\n",
    "\n",
    "    limit_80C = rules[\"deductions\"][\"80C\"][\"limit\"]\n",
    "    total_deduction += min(deductions.get(\"80C\", 0), limit_80C)\n",
    "\n",
    "    donation = deductions.get(\"donation\", 0)\n",
    "    total_deduction += donation\n",
    "\n",
    "    taxable_income = max(income - total_deduction, 0)\n",
    "    return taxable_income, total_deduction\n",
    "\n",
    "def calculate_tax(taxable_income, rules):\n",
    "    slabs = rules[\"slabs_old\"]\n",
    "    tax = 0\n",
    "    prev_limit = 0\n",
    "\n",
    "    for slab in slabs:\n",
    "        limit = slab[\"limit\"]\n",
    "        rate = slab[\"rate\"]\n",
    "        if taxable_income > limit:\n",
    "            tax += (limit - prev_limit) * rate\n",
    "            prev_limit = limit\n",
    "        else:\n",
    "            tax += (taxable_income - prev_limit) * rate\n",
    "            break\n",
    "\n",
    "    return tax\n",
    "\n",
    "\n",
    "\n",
    "def generate_tax_summary_pdf(\n",
    "    filename,\n",
    "    total_income,\n",
    "    total_deductions,\n",
    "    taxable_income,\n",
    "    tax_payable\n",
    "):\n",
    "    pdf = FPDF()\n",
    "    pdf.add_page()\n",
    "\n",
    "    pdf.set_font(\"Arial\", 'B', 16)\n",
    "    pdf.cell(0, 10, \"Tax Summary Report\", ln=True, align=\"C\")\n",
    "    pdf.ln(10)\n",
    "\n",
    "    pdf.set_font(\"Arial\", size=12)\n",
    "    pdf.cell(0, 10, f\"Total Income: Rs. {total_income:,}\", ln=True)\n",
    "    pdf.cell(0, 10, f\"Total Deductions: Rs. {total_deductions:,}\", ln=True)\n",
    "    pdf.cell(0, 10, f\"Taxable Income: Rs. {taxable_income:,}\", ln=True)\n",
    "    pdf.cell(0, 10, f\"Income Tax Payable: Rs. {tax_payable:,}\", ln=True)\n",
    "\n",
    "    pdf.ln(20)\n",
    "    pdf.set_font(\"Arial\", 'I', 10)\n",
    "    pdf.cell(0, 10, \"Generated by TaxTime - AI Tax Assistant\", ln=True, align=\"C\")\n",
    "\n",
    "    pdf.output(filename)\n",
    "    print(f\"\\n‚úÖ PDF generated: {filename}\")\n",
    "\n",
    "\n",
    "\n",
    "def main():\n",
    "    user_input = input(\"Describe your income and deductions (e.g. 'I earned ‚Çπ10L salary and ‚Çπ1L freelancing, donated ‚Çπ5K'):\\n\")\n",
    "\n",
    "    parsed = parse_income_input(user_input)\n",
    "    print(\"\\nüîç Parsed Values:\", parsed)\n",
    "\n",
    "    total_income = sum([\n",
    "        parsed[\"salary_income\"],\n",
    "        parsed[\"freelance_income\"],\n",
    "        parsed[\"crypto_income\"],\n",
    "        parsed[\"other_income\"]\n",
    "    ])\n",
    "\n",
    "    deductions = {\n",
    "        \"80C\": 0,\n",
    "        \"donation\": parsed[\"donation\"]\n",
    "    }\n",
    "\n",
    "    rules = load_tax_rules()\n",
    "\n",
    "    taxable_income, total_deduction = apply_deductions(total_income, deductions, rules)\n",
    "    tax_payable = int(calculate_tax(taxable_income, rules))\n",
    "\n",
    "    print(\"\\n----- TAX SUMMARY -----\")\n",
    "    print(f\"Total Income: ‚Çπ{total_income}\")\n",
    "    print(f\"Total Deductions: ‚Çπ{total_deduction}\")\n",
    "    print(f\"Taxable Income: ‚Çπ{taxable_income}\")\n",
    "    print(f\"Income Tax Payable: ‚Çπ{tax_payable}\")\n",
    "\n",
    "    generate_tax_summary_pdf(\n",
    "        filename=\"Tax_Summary_Report.pdf\",\n",
    "        total_income=total_income,\n",
    "        total_deductions=total_deduction,\n",
    "        taxable_income=taxable_income,\n",
    "        tax_payable=tax_payable\n",
    "    )\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5da86298-3f08-41b1-a4b7-c20e09c20727",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
