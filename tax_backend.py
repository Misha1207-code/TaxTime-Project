import re
import json
from fpdf import FPDF



def parse_income_input(text):
    text = text.lower().replace(",", "").strip()

    result = {
        "salary_income": 0,
        "freelance_income": 0,
        "crypto_income": 0,
        "donation": 0,
        "other_income": 0
    }

    patterns = {
        "salary_income": r"(?:‚Çπ|rs\.?)\s?(\d+(?:\.\d+)?[kl]?)\s?(?:from)?\s?(?:salary|job|jobs|income)?",
        "freelance_income": r"(?:‚Çπ|rs\.?)\s?(\d+(?:\.\d+)?[kl]?)\s?(?:from)?\s?(?:freelancing|freelancer|side hustle)",
        "crypto_income": r"(?:‚Çπ|rs\.?)\s?(\d+(?:\.\d+)?[kl]?)\s?(?:from)?\s?(?:crypto|bitcoin|ethereum)",
        "donation": r"(?:‚Çπ|rs\.?)\s?(\d+(?:\.\d+)?[kl]?)\s?(?:donated|donation|to charity)"
    }

    for key, pattern in patterns.items():
        match = re.search(pattern, text)
        if match:
            value = match.group(1)
            result[key] = parse_amount(value)

    return result

def parse_amount(value):
    value = value.lower().replace("rs", "").replace("‚Çπ", "").strip()
    if value.endswith('k'):
        return int(float(value[:-1]) * 1000)
    elif value.endswith('l'):
        return int(float(value[:-1]) * 100000)
    else:
        return int(float(value))


def load_tax_rules(filepath="tax_rules.json"):
    with open(filepath, "r") as f:
        return json.load(f)

def apply_deductions(income, deductions, rules):
    std_ded = rules.get("standard_deduction_old", 0)
    total_deduction = std_ded

    limit_80C = rules["deductions"]["80C"]["limit"]
    total_deduction += min(deductions.get("80C", 0), limit_80C)

    donation = deductions.get("donation", 0)
    total_deduction += donation

    taxable_income = max(income - total_deduction, 0)
    return taxable_income, total_deduction

def calculate_tax(taxable_income, rules):
    slabs = rules["slabs_old"]
    tax = 0
    prev_limit = 0

    for slab in slabs:
        limit = slab["limit"]
        rate = slab["rate"]
        if taxable_income > limit:
            tax += (limit - prev_limit) * rate
            prev_limit = limit
        else:
            tax += (taxable_income - prev_limit) * rate
            break

    return tax



def generate_tax_summary_pdf(
    filename,
    total_income,
    total_deductions,
    taxable_income,
    tax_payable
):
    pdf = FPDF()
    pdf.add_page()

    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 10, "Tax Summary Report", ln=True, align="C")
    pdf.ln(10)

    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, f"Total Income: Rs. {total_income:,}", ln=True)
    pdf.cell(0, 10, f"Total Deductions: Rs. {total_deductions:,}", ln=True)
    pdf.cell(0, 10, f"Taxable Income: Rs. {taxable_income:,}", ln=True)
    pdf.cell(0, 10, f"Income Tax Payable: Rs. {tax_payable:,}", ln=True)

    pdf.ln(20)
    pdf.set_font("Arial", 'I', 10)
    pdf.cell(0, 10, "Generated by TaxTime - AI Tax Assistant", ln=True, align="C")

    pdf.output(filename)
    print(f"\n‚úÖ PDF generated: {filename}")



def main():
    user_input = input("Describe your income and deductions (e.g. 'I earned ‚Çπ10L salary and ‚Çπ1L freelancing, donated ‚Çπ5K'):\n")

    parsed = parse_income_input(user_input)
    print("\nüîç Parsed Values:", parsed)

    total_income = sum([
        parsed["salary_income"],
        parsed["freelance_income"],
        parsed["crypto_income"],
        parsed["other_income"]
    ])

    deductions = {
        "80C": 0,
        "donation": parsed["donation"]
    }

    rules = load_tax_rules()

    taxable_income, total_deduction = apply_deductions(total_income, deductions, rules)
    tax_payable = int(calculate_tax(taxable_income, rules))

    print("\n----- TAX SUMMARY -----")
    print(f"Total Income: ‚Çπ{total_income}")
    print(f"Total Deductions: ‚Çπ{total_deduction}")
    print(f"Taxable Income: ‚Çπ{taxable_income}")
    print(f"Income Tax Payable: ‚Çπ{tax_payable}")

    generate_tax_summary_pdf(
        filename="Tax_Summary_Report.pdf",
        total_income=total_income,
        total_deductions=total_deduction,
        taxable_income=taxable_income,
        tax_payable=tax_payable
    )

if __name__ == "__main__":
    main()
